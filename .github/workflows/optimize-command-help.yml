name: Optimize Commands Help
on:
  repository_dispatch:
    types: [help-command]
jobs:
  optimize-help-command:
    name: Help Command
    runs-on: ubuntu-latest
    steps:
      - name: Create URL to the run output
        id: vars
        run: |
          {
            echo "run_url=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          } >> "$GITHUB_OUTPUT"

      - name: Generate a GitHub token
        id: github-token
        uses: camunda/infra-global-github-actions/generate-github-app-token-from-vault-secrets@main
        with:
          github-app-id-vault-key: GITHUB_OPTIMIZE_APP_ID
          github-app-id-vault-path: secret/data/products/optimize/ci/camunda-optimize
          github-app-private-key-vault-key: GITHUB_OPTIMIZE_APP_KEY
          github-app-private-key-vault-path: secret/data/products/optimize/ci/camunda-optimize
          vault-auth-method: approle
          vault-auth-role-id: ${{ secrets.VAULT_ROLE_ID }}
          vault-auth-secret-id: ${{ secrets.VAULT_SECRET_ID}}
          vault-url: ${{ secrets.VAULT_ADDR }}

      - name: Dump the client payload context
        env:
          PAYLOAD_CONTEXT: ${{ toJson(github.event.client_payload) }}
        run: echo "$PAYLOAD_CONTEXT"

      - name: Print help message
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ steps.github-token.outputs.token }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            > <details>
            > <summary>Here's a list of supported commands:</summary>
            >
            > Command | Description
            > --- | ---
            > `/help` | Post this message
            > `/assign @username` | To be run by an EM/PM to assign an engineering DRI.<br/><br/> • `Assignee` ➝ `@username`<br/> • `Body` ➝ `Engineering DRI: @username`
            > `/start` | To be run by a team member (`Implementer`) when they start working on the issue.<br/><br/> • `Status` ➝ `In Progress`<br/> • `Assignee` ➝ `Engineering DRI`
            > `/eng review @username` | To be run by a team member (`Implementer`) when they want to pass the issue to review.<br/><br/> • `Assignee` ➝ `@username`<br/> • `Status` ➝ `In Review`
            > `/eng approve` | To be run by the engineering reviewer if they're fine with the implementation.<br/><br/>if `labels` contains `qa/notNeeded` and `kind/epic`<br/> • `Status` ➝ `PM Review`<br/> • `Assignee` ➝ `PM`<br/>if `labels` contains `qa/notNeeded` and not `kind/epic`<br/> • `Status` ➝ `Ready to Complete`<br/> • `Assignee` ➝ `Engineering DRI`<br/>else<br/> • `Status` ➝ `QA Review`<br/> • `Assignee` ➝ `QA`
            > `/eng reject` | To be run by the engineering reviewer if they request changes in the implementation.<br/><br/> • `Status` ➝ `In Progress`<br/> • `Assignee` ➝ `Engineering DRI`
            > `/qa skip` | To be run by a QA member on an issue to mark it doesn't need QA review.<br/><br/>if `Status: QA Review` and `labels` contains `kind/epic`<br/>• `Status` ➝ `PM Review`<br/>if `Status: QA Review` and `labels` not contains `kind/epic`<br/> • `Status` ➝ `Ready to Complete`<br/>always:<br/> `labels` ➝ ~`qa/pendingVerification, qa/verified`~ `qa/notNeeded`
            > `/qa verified` | To be run by a QA member on a bug issue to confirm that it is a real bug.<br/><br/> • `Status` ➝ `Inbox`<br/> • `labels` ➝ ~`qa/pendingVerification`~ `qa/verified`
            > `/qa not verified` | To be run by a QA member on a bug issue if it's not a bug.<br/><br/> • `Issue` ➝ `Closed`<br/> • `labels` ➝ ~`qa/pendingVerification`~ `qa/notVerified`
            > `/qa approve` | To be run by the QA reviewer if the feature passes all the tests.<br/><br/>if `kind/epic`:<br/> • `Status` ➝  `PM Review`<br/> • `Assignee` ➝ `PM`<br/>else:<br/> • `Status` ➝  `Ready to Complete`<br/> • `Assignee` ➝ `Engineering DRI`
            > `/qa reject` | To be run by the QA reviewer if they request changes or some tests have failed.<br/><br/> • `Status` ➝ `In Progress`<br/> • `Assignee` ➝ `Engineering DRI`
            > `/pm approve` | To be run by the PM reviewer if they're fine with the implementation.<br/><br/> • `Status` ➝ `Ready to Complete`<br/> • `Assignee` ➝ `Engineering DRI`
            > `/pm reject` | To be run by the PM reviewer if they request changes in the implementation.<br/><br/> • `Status` ➝ `In Progress`<br/> • `Assignee` ➝ `Engineering DRI`
            > </details>
          reactions: "+1"

      - name: Update comment in case of failure
        if: failure()
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            > Had issues fulfilling your command, check the [logs](${{ steps.vars.outputs.run_url }})
          reactions: confused
